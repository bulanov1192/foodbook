// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String        @id @default(uuid())
  name          String?       @db.VarChar(100)
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Roles         @default(BASIC)
  deletedAt     DateTime?
  Products      Product[]
  Recipies      Recipe[]
  likes         RecipeLike[]
  ProductLike   ProductLike[]
  Session       Session[]
  Account       Account[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(200)
  description String?
  images      String[]      @default([])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  user_id     String
  user        User          @relation(fields: [user_id], references: [id])
  ProductLike ProductLike[]
}

model Recipe {
  id               String           @id @default(uuid())
  title            String           @db.VarChar(255)
  description      String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  recipe_steps     RecipeStep[]
  user_id          String
  user             User             @relation(fields: [user_id], references: [id])
  RecipeCategories RecipeCategory[]
  likes            RecipeLike[]
}

model RecipeStep {
  id          String    @id @default(uuid())
  recipe_id   String
  step_number Int
  title       String    @db.VarChar(255)
  description String
  image_url   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  recipe Recipe @relation(fields: [recipe_id], references: [id])
}

model RecipeCategory {
  id          String   @id @default(uuid())
  title       String
  description String?
  icon        String
  Recipes     Recipe[]
}

model RecipeLike {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

model ProductLike {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum Roles {
  BASIC
  ADMIN
}
